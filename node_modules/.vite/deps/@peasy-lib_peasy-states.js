import "./chunk-76J2PTFD.js";

// node_modules/@peasy-lib/peasy-states/dist/esm/index.mjs
var State = class {
  constructor(t, s) {
    this.states = t;
    this.name = s;
  }
  enter(t, ...s) {
  }
  leave(t, ...s) {
  }
  update(...t) {
  }
};
var States = class {
  constructor() {
    this.states = /* @__PURE__ */ new Map();
    this.current = null;
    this.currentParams = [];
    this.currentTime = 0;
  }
  register(...t) {
    const s = [];
    let i = [];
    const e = [...t];
    e.reverse();
    for (const t2 of e) {
      if (typeof t2 === "string") {
        i.push(t2);
        continue;
      }
      if (i.length === 0)
        i = [t2.name];
      s.push(...i.map((s2) => {
        const i2 = new t2(this, s2);
        this.states.set(i2.name, i2);
        this.states.set(i2.constructor, i2);
        return i2;
      }));
      i = [];
    }
    return s;
  }
  set(t, s = 0, ...i) {
    const e = typeof t === "string" || t != null && "prototype" in t ? this.states.get(t) ?? null : t;
    if ((e ?? null) == (this.current ?? null)) {
      if (i.length === this.currentParams.length) {
        let t2 = true;
        for (let s2 = 0; s2 < i.length; s2++)
          if (i[s2] !== this.currentParams[s2]) {
            t2 = false;
            break;
          }
        if (t2)
          return;
      }
    }
    let n;
    let h;
    if (this.current != null)
      n = this.current.leave(e, ...i);
    if (n instanceof Promise)
      return n.then(() => {
        if (e != null)
          h = e.enter(this.current, ...i);
        if (h instanceof Promise)
          return h.then(() => {
            this.current = e;
            this.currentParams = [...i];
            this.currentTime = s;
          });
        this.current = e;
        this.currentParams = [...i];
        this.currentTime = s;
      });
    if (e != null)
      h = e.enter(this.current, ...i);
    if (h instanceof Promise)
      return h.then(() => {
        this.current = e;
        this.currentParams = [...i];
        this.currentTime = s;
      });
    this.current = e;
    this.currentParams = [...i];
    this.currentTime = s;
  }
  get(t) {
    if (t != null && this.currentTime > t)
      this.currentTime = t;
    return {
      state: this.current,
      since: this.currentTime
    };
  }
  update(...t) {
    var _a;
    return (_a = this.current) == null ? void 0 : _a.update(...t);
  }
};
export {
  State,
  States
};
//# sourceMappingURL=@peasy-lib_peasy-states.js.map
