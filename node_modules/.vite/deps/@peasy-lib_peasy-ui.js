import "./chunk-76J2PTFD.js";

// node_modules/@peasy-lib/peasy-ui/dist/esm/index.mjs
var UIView = class _UIView {
  constructor() {
    this.state = "created";
    this.host = null;
    this.bindings = [];
    this.views = [];
    this.animations = [];
    this.animationQueue = [];
    this.destroyed = "";
    this.moved = "";
  }
  static create(t2, e2 = {}, i2, n = {
    parent: null,
    prepare: true,
    sibling: null
  }) {
    const h = new _UIView();
    h.model = e2;
    h.element = i2 ?? t2;
    h.parent = n.parent ?? s;
    h.host = n.host ?? h.parent.host;
    if (i2 instanceof HTMLTemplateElement || (i2 == null ? void 0 : i2.tagName) === "TEMPLATE") {
      const r = i2.content.cloneNode(true);
      if (r.children.length === 1)
        return s.create(t2, e2, r.firstElementChild, n);
      h.views = [...r.children].map((i3) => s.create(t2, e2, i3, {
        ...n,
        parent: h
      }));
      h.state = "rendered";
    } else
      h.bindings.push(...s.parse(h.element, e2, h, n.parent));
    h.parentElement = i2 != null ? t2 : t2.ownerDocument.documentElement;
    h.sibling = n.sibling;
    if (h.views.length > 1)
      h.attached = Promise.all(h.views.map((t3) => t3.attached));
    else
      h.attached = new Promise((t3) => {
        h.attachResolve = t3;
      });
    return h;
  }
  destroy() {
    this.views.forEach((t2) => t2.destroy());
    this.element.classList.add("pui-removing");
    this.destroyed = "queue";
    s.destroyed.push(this);
  }
  terminate() {
    void Promise.all(this.getAnimations()).then(() => {
      var _a;
      (_a = this.element.parentElement) == null ? void 0 : _a.removeChild(this.element);
      this.bindings.forEach((t3) => t3.unbind());
      const t2 = this.parent.views.findIndex((t3) => t3 === this);
      if (t2 > -1)
        this.parent.views.splice(t2, 1);
    });
    this.destroyed = "destroyed";
  }
  move(t2) {
    this.moved = "queue";
    this.element.classList.add("pui-moving");
    this.sibling = t2;
  }
  play(t2, e2) {
    if (typeof t2 === "string")
      t2 = this.animations.find((e3) => e3.name === t2).clone();
    t2.element = e2;
    t2.state = "pending";
    this.animationQueue.push(t2);
    this.updateAnimations(performance.now());
    return t2;
  }
  updateFromUI() {
    this.views.forEach((t2) => t2.updateFromUI());
    this.bindings.forEach((t2) => t2.updateFromUI());
  }
  updateToUI() {
    var _a;
    this.views.forEach((t2) => t2.updateToUI());
    this.bindings.forEach((t2) => t2.updateToUI());
    switch (this.state) {
      case "created":
        this.element.classList.add("pui-adding");
        if (!this.element.hasAttribute("PUI-UNRENDERED"))
          (this.parentElement ?? s.parentElement(this.element, this.parent)).insertBefore(this.element, ((_a = this.sibling) == null ? void 0 : _a.nextSibling) ?? null);
        this.attachResolve();
        this.state = "attaching";
        break;
      case "attaching":
        if (this.getAnimations(false).length === 0) {
          this.element.classList.remove("pui-adding");
          this.state = "attached";
        }
        break;
      case "attached":
        this.state = "rendered";
        break;
    }
  }
  updateAtEvents() {
    this.views.forEach((t2) => t2.updateAtEvents());
    this.bindings.forEach((t2) => t2.updateAtEvents());
  }
  updateAnimations(t2) {
    var _a;
    while (((_a = this.animationQueue[0]) == null ? void 0 : _a.state) === "finished") {
      const t3 = this.animationQueue.shift();
      t3.destroy();
    }
    for (let e2 = 0; e2 < this.animationQueue.length; e2++) {
      const i2 = this.animationQueue[e2];
      if (i2.state !== "pending")
        continue;
      if (i2.isBlocked(t2))
        continue;
      i2.state = "playing";
      i2.startTime = t2;
      i2.animation = i2.element.animate(i2.keyframes, i2.options);
      i2.finished = i2.animation.finished;
      void i2.finished.then(() => {
        i2.state = "finished";
        this.updateAnimations(performance.now());
      });
    }
  }
  updateMove() {
    switch (this.moved) {
      case "queue":
        this.moved = "move";
        break;
      case "move":
        if (this.getAnimations().length === 0) {
          const t2 = s.parentElement(this.element, this.parent);
          t2.insertBefore(this.element, this.sibling.nextSibling);
          this.element.classList.remove("pui-moving");
          this.moved = "";
          this.sibling = null;
        }
        break;
    }
    this.bindings.forEach((t2) => t2.updateMove());
  }
  getAnimations(t2 = true) {
    return this.element.getAnimations({
      subtree: t2
    }).filter((t3) => {
      var _a;
      return t3.playState !== "finished" && ((_a = t3.effect) == null ? void 0 : _a.getTiming().iterations) !== 1 / 0;
    }).map((t3) => t3.finished);
  }
};
var UIBinding = class _UIBinding {
  constructor() {
    this.fromUI = false;
    this.toUI = true;
    this.atEvent = false;
    this.oneTime = false;
    this.views = [];
    this.firstUpdate = true;
    this.events = [];
    this.triggerAtEvent = (t2) => {
      if (t2.type === "change")
        this.events.push(t2);
      else {
        const e2 = s.resolveValue(this.object, this.property);
        e2.call(this.object.$model, t2, this.object.$model, this.element, this.attribute, this.object);
      }
    };
    this.twoWayBindingEvent = (t2) => {
      const { target: e2, property: i2 } = s.resolveProperty(this.object, this.property);
      const n = t2.detail;
      if (n !== this.lastUIValue) {
        let t3 = n;
        if (t3 !== void 0 && t3 !== this.lastValue) {
          if (s.resolveValue(this.object, this.property) === "number" && !isNaN(t3))
            t3 = +t3;
          e2[i2] = t3;
        } else
          e2[i2] = t3;
      }
    };
    this.id = ++s.id;
  }
  get element() {
    if (this.$element == null)
      this.$element = typeof this.selector === "string" ? this.context.querySelector(this.selector) : this.selector;
    return this.$element;
  }
  set element(t2) {
    this.$element = t2;
  }
  static create(t2) {
    var _a;
    const e2 = new _UIBinding();
    const i2 = ((_a = t2.property) == null ? void 0 : _a.split(":")) ?? [];
    const n = i2.shift();
    e2.object = "$model" in t2.object ? t2.object : {
      $model: t2.object
    };
    e2.property = n;
    e2.arguments = i2;
    e2.context = t2.context ?? document;
    e2.selector = t2.selector;
    e2.attribute = t2.attribute ?? "innerText";
    e2.value = t2.value ?? e2.value;
    e2.template = t2.template ?? e2.template;
    e2.fromUI = t2.fromUI ?? e2.fromUI;
    e2.toUI = t2.toUI ?? e2.toUI;
    e2.atEvent = t2.atEvent ?? e2.atEvent;
    e2.oneTime = t2.oneTime ?? e2.oneTime;
    e2.parent = t2.parent ?? s;
    e2.addListener();
    if (typeof e2.fromUI !== "boolean")
      e2.fromUI = e2.fromUI.bind(e2);
    if (typeof e2.toUI !== "boolean")
      e2.toUI = e2.toUI.bind(e2);
    return e2;
  }
  destroy() {
    this.element = null;
    this.removeListener();
    this.views.forEach((t2) => t2.destroy());
  }
  unbind() {
    s.unbind(this);
  }
  addListener() {
    if (this.atEvent) {
      this.toUI = false;
      this.fromUI = false;
      this.element.addEventListener(this.attribute, this.triggerAtEvent);
    }
    if (this.toUI && this.fromUI && customElements.get(this.element.tagName.toLowerCase()) != null)
      this.element.addEventListener(this.attribute, this.twoWayBindingEvent);
  }
  removeListener() {
    if (this.atEvent)
      this.element.removeEventListener(this.attribute, this.triggerAtEvent);
    if (this.toUI && this.fromUI && customElements.get(this.element.tagName.toLowerCase()) != null)
      this.element.removeEventListener(this.attribute, this.twoWayBindingEvent);
  }
  updateFromUI() {
    var _a;
    if (this.fromUI === false || this.firstUpdate) {
      this.firstUpdate = false;
      this.views.forEach((t3) => t3.updateFromUI());
      return;
    }
    const { target: t2, property: e2 } = s.resolveProperty(this.element, this.attribute);
    const i2 = t2[e2];
    if (i2 !== this.lastUIValue) {
      let t3 = this.fromUI !== true ? this.fromUI(i2, this.lastUIValue, this.property, this.object) : i2;
      this.lastUIValue = i2;
      if (t3 !== void 0 && t3 !== this.lastValue) {
        this.lastValue = t3;
        const { target: e3, property: i3 } = s.resolveProperty(this.object, this.property);
        if (s.resolveValue(this.object, this.property) === "number" && !isNaN(t3))
          t3 = +t3;
        e3[i3] = t3;
      } else
        this.lastValue = t3;
      (_a = this.parent.host) == null ? void 0 : _a.dispatchEvent(new CustomEvent(e2, {
        detail: t3
      }));
    }
    this.views.forEach((t3) => t3.updateFromUI());
  }
  updateToUI() {
    if (this.toUI === false) {
      this.views.forEach((t3) => t3.updateToUI());
      return;
    }
    let t2 = s.resolveValue(this.object, this.property);
    if (this.template != null)
      if (this.template instanceof HTMLElement)
        if (typeof this.attribute === "boolean") {
          t2 = (t2 ?? false) === false ? false : true;
          if (t2 !== this.lastValue) {
            const e2 = this.toUI !== true ? this.toUI(t2, this.lastValue, this.property, this.object, this.value) : t2;
            if (e2 !== void 0 && e2 !== this.lastUIValue) {
              if (e2 === this.attribute)
                this.views.push(UIView.create(this.element.parentElement, this.object, this.template.cloneNode(true), {
                  parent: this,
                  prepare: false,
                  sibling: this.element
                }));
              else {
                const t3 = this.views.pop();
                t3 == null ? void 0 : t3.destroy();
              }
              this.lastValue = t2;
              this.lastUIValue = e2;
            }
          }
        } else {
          let e2 = false;
          let i2 = false;
          if (t2 == null)
            t2 = [];
          const n = this.arguments[0];
          const h = this.lastValue ?? [];
          if (t2.length !== h.length)
            e2 = true;
          else
            for (let r2 = 0, o2 = t2.length; r2 < o2; r2++) {
              let o3, l2;
              if (n == null) {
                if (t2[r2] !== h[r2]) {
                  e2 = true;
                  i2 = true;
                }
              } else {
                o3 = s.resolveValue(t2[r2] ?? {}, n);
                l2 = s.resolveValue(h[r2] ?? {}, n);
                if (o3 !== l2)
                  e2 = true;
                if (t2[r2] !== h[r2])
                  i2 = true;
              }
            }
          if (!e2)
            if (!i2)
              return this.updateViews();
            else {
              const e3 = this.toUI !== true ? this.toUI(t2, h, this.property, this.object, this.value) : t2;
              return this.updateViews(t2, e3);
            }
          const r = this.toUI !== true ? this.toUI(t2, h, this.property, this.object, this.value) : t2;
          if (r == null)
            return this.updateViews();
          const o = this.lastUIValue ?? [];
          let l = 0;
          for (let t3 = 0, e3 = r.length, i3 = 0; t3 < e3; t3++, i3++) {
            let e4, h2;
            if (n == null) {
              e4 = r[t3];
              h2 = o[i3];
            } else {
              e4 = s.resolveValue(r[t3] ?? {}, n);
              h2 = s.resolveValue(o[i3] ?? {}, n);
            }
            if (e4 === h2)
              l++;
            else
              break;
          }
          if (l === r.length && r.length === o.length)
            return this.updateViews(t2, r);
          const u = this.views.splice(0, l);
          let a = u[u.length - 1];
          for (let t3 = l, e3 = r.length, i3 = l; t3 < e3; t3++, i3++) {
            const e4 = r[t3];
            const i4 = this.views.shift();
            if (i4 == null) {
              const t4 = {
                $model: {
                  [this.attribute]: e4
                },
                $parent: this.object
              };
              const i5 = UIView.create(this.element.parentElement, t4, this.template.cloneNode(true), {
                parent: this,
                prepare: false,
                sibling: (a == null ? void 0 : a.element) ?? this.element
              });
              u.push(i5);
              a = i5;
              continue;
            }
            const h2 = n == null ? e4 : s.resolveValue(e4 ?? {}, n);
            const o2 = i4 == null ? void 0 : i4.model.$model[this.attribute];
            const l2 = n == null ? o2 : s.resolveValue(o2 ?? {}, n);
            if (h2 === l2) {
              u.push(i4);
              i4.move((a == null ? void 0 : a.element) ?? this.element);
              a = i4;
              continue;
            }
            if (!r.slice(t3).map((t4) => n == null ? t4 : s.resolveValue(t4 ?? {}, n)).includes(l2)) {
              i4.destroy();
              t3--;
              a = i4;
              continue;
            }
            this.views.unshift(i4);
            let c = false;
            for (let t4 = 0, e5 = this.views.length; t4 < e5; t4++) {
              const e6 = this.views[t4];
              const i5 = e6 == null ? void 0 : e6.model.$model[this.attribute];
              const r2 = n == null ? i5 : s.resolveValue(i5 ?? {}, n);
              if (h2 === r2) {
                u.push(...this.views.splice(t4, 1));
                e6.move((a == null ? void 0 : a.element) ?? this.element);
                c = true;
                a = e6;
                break;
              }
            }
            if (!c) {
              const t4 = {
                $model: {
                  [this.attribute]: e4
                },
                $parent: this.object
              };
              const i5 = UIView.create(this.element.parentElement, t4, this.template.cloneNode(true), {
                parent: this,
                prepare: false,
                sibling: (a == null ? void 0 : a.element) ?? this.element
              });
              u.push(i5);
              a = i5;
            }
          }
          this.views.forEach((t3) => t3.destroy());
          this.views = u;
          return this.updateViews(t2, r);
        }
      else {
        const e2 = s.resolveValue(this.object, this.attribute);
        if ((t2 ?? e2) == null || (t2 ?? e2) !== this.lastValue) {
          if (this.lastUIValue != null) {
            this.lastUIValue.destroy();
            this.lastUIValue = null;
          }
          const i2 = t2 == null ? e2 : e2.create(t2);
          const n = e2.template;
          this.lastValue = t2 ?? e2;
          const h = this.element.nodeType === 8 ? this.element.parentElement : this.element;
          const r = this.element.nodeType === 8 ? this.element : null;
          this.lastUIValue = s.create(h, i2, n, {
            parent: this,
            prepare: true,
            sibling: r
          });
          this.views.push(this.lastUIValue);
        }
      }
    else if (t2 !== this.lastValue) {
      const e2 = this.toUI !== true ? this.toUI(t2, this.lastValue, this.property, this.object, this.value) : t2;
      if (e2 !== void 0 && e2 !== this.lastUIValue) {
        const { target: i2, property: n } = s.resolveProperty(this.element, this.attribute);
        i2[n] = e2;
        if ("setAttribute" in this.element)
          this.element.setAttribute(this.attribute, e2);
        this.lastValue = t2;
        this.lastUIValue = e2;
      }
    }
    this.updateViews();
  }
  updateAtEvents() {
    let t2 = this.events.shift();
    while (t2 != null) {
      const e2 = s.resolveValue(this.object, this.property);
      e2.call(this.object.$model, t2, this.object.$model, this.element, this.attribute, this.object);
      t2 = this.events.shift();
    }
    this.views.forEach((t3) => t3.updateAtEvents());
  }
  updateMove() {
    this.views.forEach((t2) => t2.updateMove());
  }
  updateViews(t2, e2) {
    if (t2 == null)
      this.views.forEach((t3) => t3.updateToUI());
    else {
      this.views.forEach((t3, i2) => {
        const s2 = e2[i2];
        if (typeof s2 === "object")
          s2.$index = i2;
        t3.model.$model[this.attribute] = s2;
        t3.model.$index = i2;
        t3.updateToUI();
      });
      this.lastValue = [...t2];
      this.lastUIValue = [...e2];
    }
    if (this.oneTime) {
      this.toUI = false;
      this.fromUI = false;
    }
  }
};
var t;
var _UI = class {
  static initialize(t2 = true) {
    if (this.initialized)
      return;
    this.initialized = true;
    this.initializeLoadPromise();
    if (t2 === false)
      return;
    if (t2 === true) {
      const t3 = () => {
        this.update();
        requestAnimationFrame(t3);
      };
      requestAnimationFrame(t3);
      return;
    }
    setInterval(() => this.update(), 1e3 / t2);
  }
  static import(t2) {
    this.initializeLoadPromise();
    document.body.insertAdjacentHTML(`afterbegin`, `<object type="text/pui" data="${t2}"></object>`);
  }
  static ready() {
    this.initialize();
    return this.loadPromise.then(() => {
      if (this.hoist())
        document.head.insertAdjacentHTML("beforeend", '<style> object[type="text/pui"] { height: 0; position: absolute; } </style>');
      return this.registrations;
    });
  }
  static create(t2 = document.body, e2 = {}, i2 = null, n = {
    parent: null,
    prepare: true,
    sibling: null
  }) {
    var _a;
    if (typeof t2 === "string")
      t2 = document.querySelector(t2);
    if (typeof e2 === "string" || e2 instanceof HTMLElement) {
      console.warn("Old parameter order to UI.create!");
      [e2, i2] = [i2, e2];
    }
    if (typeof i2 === "string") {
      const e3 = ((_a = t2 == null ? void 0 : t2.ownerDocument) == null ? void 0 : _a.defaultView) != null ? t2.ownerDocument : document;
      if (i2.startsWith("#"))
        i2 = e3.querySelector(i2);
      else {
        const t3 = e3.createElement("template");
        t3.innerHTML = n.prepare ? this.prepare(i2) : i2;
        i2 = t3;
      }
    }
    const h = UIView.create(t2, e2, i2, n);
    if (h.parent === s)
      this.views.push(h);
    this.initialize();
    return h;
  }
  static play(t2, e2) {
    if (typeof t2 === "string") {
      t2 = this.globals.animations.find((e3) => e3.name === t2).clone();
      return t2.play(e2);
    }
    return t2.play();
  }
  static queue(t2) {
    this.t.push(t2);
  }
  static register(t2, e2) {
    if (typeof t2 === "string") {
      this.registrations[t2] = e2;
      return;
    }
    this.registerWebComponent(e2, t2);
  }
  static parse(t2, e2, i2, n) {
    const h = [];
    if (t2 instanceof Comment)
      return [];
    if (t2 instanceof HTMLTemplateElement || t2.tagName === "TEMPLATE")
      return [];
    if (t2.nodeType === 3) {
      let s2 = t2.textContent;
      let r = s2.match(this.regexValue);
      while (r != null) {
        const o = r[1];
        let l = r[2];
        s2 = r[3];
        let u = false;
        if (l.startsWith("|")) {
          u = true;
          l = l.slice(1).trimStart();
        }
        const a = l.match(this.regexConditionalValue);
        let c;
        let f = true;
        if (l.startsWith("(")) {
          const t3 = `_pui${this.bindingCounter++}`;
          Object.defineProperty(e2, t3, {
            get: new Function(`return ${l}`)
          });
          l = t3;
        } else if (a) {
          l = a[3];
          c = `${a[2]}${a[1]}`;
          f = function(t3, e3, i3, s3, n2) {
            const h2 = n2[0] === "=";
            n2 = n2.slice(2, -1);
            return !!t3 === h2 ? n2 : "";
          };
        }
        let p = t2.cloneNode();
        t2.textContent = o;
        this.parentElement(t2, n).insertBefore(p, t2.nextSibling);
        h.push(this.bind({
          selector: p,
          attribute: "textContent",
          object: e2,
          property: l,
          parent: i2,
          oneTime: u,
          value: c,
          toUI: f
        }));
        t2 = p;
        p = t2.cloneNode();
        p.textContent = s2;
        this.parentElement(t2, n).insertBefore(p, t2.nextSibling);
        t2 = p;
        r = s2.match(this.regexValue);
      }
    } else {
      const r = t2.getAttribute("pui") ?? "";
      if (r.trim().length > 0) {
        const e3 = r.split(";");
        for (let i3 of e3) {
          i3 = i3.trim();
          if (i3.length > 0)
            t2.setAttribute(`pui.${this.bindingCounter++}`, i3);
        }
      }
      t2.removeAttribute("pui");
      h.push(...Object.keys(t2.attributes ?? []).reverse().map((h2) => {
        var _a;
        const r2 = [];
        if (t2 instanceof Comment)
          return [];
        const o = t2.attributes[h2];
        if (o.name.startsWith("pui.")) {
          const s2 = o.value.match(this.regexAttribute);
          let [h3, r3, l2, u2, a2] = s2;
          let c;
          let f;
          let p = false;
          if (l2 !== "@") {
            const i3 = r3.match(/^'(.*?)'$/);
            if (i3 != null) {
              c = i3[1];
              t2.setAttribute("value", c);
              r3 = t2.nodeName.toLowerCase() === "option" ? "selected" : "checked";
              u2 = (t3) => t3 ? c : void 0;
              l2 = (t3) => t3 === c;
            } else if (r3 === "")
              if (u2 === ">") {
                const { target: i4, property: s3 } = this.resolveProperty(e2, a2);
                i4[s3] = t2;
                return [];
              } else {
                const e3 = document.createComment(o.name);
                this.parentNode(t2, n).insertBefore(e3, t2);
                this.parentNode(t2, n).removeChild(t2);
                t2.removeAttribute(o.name);
                f = t2;
                t2 = e3;
                r3 = l2 === "=";
                l2 = true;
                if (u2 === "|")
                  p = true;
              }
            else if (u2 === "=" && l2 === "=") {
              if (!t2.tagName.includes("-")) {
                t2.setAttribute("pui-unrendered", "");
                const e3 = this.parentNode(t2, n);
                if (e3.nodeType !== 8) {
                  const i4 = document.createComment(o.name);
                  e3.insertBefore(i4, t2);
                  e3.removeChild(t2);
                  t2.removeAttribute(o.name);
                  t2 = i4;
                } else
                  t2 = e3;
              }
              f = r3;
              l2 = true;
            } else if (u2 === "*") {
              const e3 = document.createComment(o.name);
              this.parentNode(t2, n).insertBefore(e3, t2);
              this.parentNode(t2, n).removeChild(t2);
              t2.removeAttribute(o.name);
              f = t2;
              t2 = e3;
            } else if (u2 === "|")
              p = true;
            else if (r3 !== "checked")
              t2.setAttribute(r3, ((_a = t2.getAttribute) == null ? void 0 : _a.call(t2, r3)) ?? "");
          }
          return [this.bind({
            selector: t2,
            attribute: r3,
            value: c,
            object: e2,
            property: a2,
            template: f,
            toUI: typeof l2 === "string" ? l2 === "<" : l2,
            fromUI: typeof u2 === "string" ? u2 === ">" : u2,
            atEvent: l2 === "@",
            parent: i2,
            oneTime: p
          })];
        }
        const l = [o.value];
        let u = 0;
        let a = l[u].match(this.regexValue);
        while (a != null) {
          let { before: n2, property: h3, after: c } = a.groups;
          let f = false;
          if (h3.startsWith("|")) {
            f = true;
            h3 = h3.slice(1).trimStart();
          }
          const p = h3.match(this.regexConditionalValue);
          let d;
          if (p) {
            h3 = p[3];
            d = `${p[2]}${p[1]}`;
          }
          r2.push(this.bind({
            selector: t2,
            attribute: o.name,
            object: e2,
            property: h3,
            oneTime: f,
            toUI(e3, i3, n3, h4, r3) {
              if (this.oneTime) {
                const t3 = l.indexOf(n3);
                if (t3 > -1) {
                  l[t3] = s.resolveValue(h4, n3);
                  l[t3 - 1] += l[t3] + l[t3 + 1];
                  l.splice(t3, 2);
                }
              }
              const u2 = l.map((t3, i4) => {
                if (i4 % 2 === 0)
                  return t3;
                const o2 = t3.match(s.regexSplitConditionalValue);
                if (o2) {
                  const i5 = t3 === `${n3}${r3}` ? e3 : s.resolveValue(h4, o2[1]);
                  const l2 = o2[2] === "=";
                  return !!i5 === l2 ? o2[3].slice(1, -1) : "";
                }
                return t3 === n3 ? e3 : s.resolveValue(h4, t3);
              }).join("");
              t2.setAttribute(o.name, u2);
              return u2;
            },
            parent: i2,
            value: d
          }));
          l[u++] = n2;
          l[u++] = `${h3}${d ?? ""}`;
          l[u] = c;
          a = l[u].match(this.regexValue);
        }
        return r2;
      }).flat());
      if (t2 instanceof Comment)
        return h.filter((t3) => {
          if (t3.template != null)
            return true;
          t3.unbind();
          return false;
        });
      if (!this.leaveAttributes)
        for (let e3 = Object.keys(t2.attributes ?? []).length - 1; e3 >= 0; e3--) {
          const i3 = t2.attributes[Object.keys(t2.attributes ?? [])[e3]];
          if (i3.name.startsWith("pui."))
            t2.removeAttribute(i3.name);
        }
      h.push(...Array.from(t2.childNodes).map((t3) => this.parse(t3, e2, i2, n)).flat());
    }
    return h;
  }
  static bind(t2) {
    const e2 = UIBinding.create(t2);
    return e2;
  }
  static unbind(t2) {
    t2.destroy();
    if (t2.parent !== s) {
      const e2 = t2.parent.bindings;
      const i2 = e2.indexOf(t2);
      if (i2 > -1)
        e2.splice(i2, 1);
    }
  }
  static update() {
    this.i.forEach((t3) => t3());
    this.i = this.t;
    this.t = [];
    this.views.forEach((t3) => t3.updateToUI());
    this.views.forEach((t3) => t3.updateFromUI());
    this.views.forEach((t3) => t3.updateAtEvents());
    const t2 = performance.now();
    [...this.views, this.globals].forEach((e2) => e2.updateAnimations(t2));
    this.views.forEach((t3) => {
      t3.updateMove();
    });
    this.destroyed.forEach((t3) => {
      switch (t3.destroyed) {
        case "queue":
          if (t3.state === "rendered")
            t3.destroyed = "destroy";
          else
            t3.updateToUI();
          break;
        case "destroy": {
          t3.terminate();
          const e2 = this.destroyed.findIndex((e3) => t3 === e3);
          if (e2 > -1)
            this.destroyed.splice(e2, 1);
        }
      }
    });
  }
  static resolveProperty(t2, e2) {
    e2 = e2.replace("[", ".").replace("]", ".");
    const i2 = e2.split(".").filter((t3) => (t3 ?? "").length > 0);
    while (i2[0] === "$parent" && t2.$parent != null) {
      t2 = t2.$parent;
      i2.shift();
    }
    let s2 = t2;
    if (i2[0] === "$index" && this.objectHas(s2, "$index"))
      return {
        target: s2,
        property: i2[0]
      };
    if (this.objectHas(s2, "$model"))
      s2 = t2.$model;
    while (i2.length > 1)
      s2 = s2[i2.shift()];
    return {
      target: s2,
      property: i2[0]
    };
  }
  static resolveValue(t2, e2) {
    let i2 = 0;
    do {
      const { target: i3, property: s2 } = this.resolveProperty(t2, e2);
      if (i3 != null && this.objectHas(i3, s2))
        return i3[s2];
      t2 = t2.$parent;
    } while (t2 != null && i2++ < 1e3);
    if (e2 in this.registrations)
      return this.registrations[e2];
  }
  static initializeLoadPromise() {
    var _a;
    if (this.loadPromise == null) {
      this.loadPromise = new Promise((t2) => this.loadResolve = t2);
      (_a = document.defaultView) == null ? void 0 : _a.addEventListener("load", this.loaded);
    }
  }
  static hoist(t2 = document, e2 = document) {
    if (t2 !== e2) {
      (e2.querySelectorAll("style") ?? []).forEach((e3) => {
        t2.head.appendChild(e3.cloneNode(true));
      });
      (e2.querySelectorAll("template") ?? []).forEach((e3) => {
        t2.head.appendChild(e3.cloneNode(true));
      });
    }
    const i2 = e2.querySelectorAll('object[type="text/pui"]') ?? [];
    let s2 = i2.length > 0;
    i2.forEach((e3) => {
      s2 = this.hoist(t2, e3.contentDocument) || s2;
    });
    return s2;
  }
  static objectHas(t2, e2) {
    try {
      return e2 in t2;
    } catch (t3) {
      return false;
    }
  }
  static parentElement(t2, e2) {
    const i2 = t2.parentElement;
    if (i2 != null)
      return i2;
    while (e2 != null && (e2.element == null || e2.element === t2))
      e2 = e2.parent;
    return e2 == null ? void 0 : e2.element;
  }
  static parentNode(t2, e2) {
    const i2 = t2.parentNode;
    if (i2 != null)
      return i2;
    while (e2 != null && (e2.element == null || e2.element === t2))
      e2 = e2.parent;
    return e2 == null ? void 0 : e2.element;
  }
  static prepare(t2) {
    let e2 = t2;
    t2 = "";
    let i2 = e2.match(this.regexReplace);
    while (i2 != null) {
      const [s2, n, h, r] = i2;
      if (h.match(/\S\s*===/))
        t2 += `${n.trimEnd()}br PUI.${this.bindingCounter++}="${h}"`;
      else
        t2 += `${n} PUI.${this.bindingCounter++}="${h}" `;
      e2 = r;
      i2 = e2.match(this.regexReplace);
    }
    t2 += e2;
    return t2;
  }
  static parseAttribute(t2, e2, i2, s2, n, h) {
    const r = h.match(this.regexAttribute);
    let [o, l, u, a, c] = r;
    let f;
    let p;
    let d = false;
    if (u !== "@") {
      const i3 = l.match(/^'(.*?)'$/);
      if (i3 != null) {
        f = i3[1];
        t2.setAttribute("value", f);
        l = t2.nodeName.toLowerCase() === "option" ? "selected" : "checked";
        a = (t3) => t3 ? f : void 0;
        u = (t3) => t3 === f;
      } else if (l === "")
        if (a === ">") {
          const { target: i4, property: s3 } = this.resolveProperty(e2, c);
          i4[s3] = t2;
          return [];
        } else {
          const e3 = document.createComment(n);
          this.parentNode(t2, s2).insertBefore(e3, t2);
          this.parentNode(t2, s2).removeChild(t2);
          t2.removeAttribute(n);
          p = t2;
          t2 = e3;
          l = u === "=";
          u = true;
          if (a === "|")
            d = true;
        }
      else if (a === "=" && u === "=") {
        const e3 = this.parentNode(t2, s2);
        if (e3.nodeType !== 8) {
          const i4 = document.createComment(n);
          e3.insertBefore(i4, t2);
          e3.removeChild(t2);
          t2.removeAttribute(n);
          t2 = i4;
        } else
          t2 = e3;
        p = l;
        d = true;
        u = true;
      } else if (a === "*") {
        const e3 = document.createComment(n);
        this.parentNode(t2, s2).insertBefore(e3, t2);
        this.parentNode(t2, s2).removeChild(t2);
        t2.removeAttribute(n);
        p = t2;
        t2 = e3;
      } else if (a === "|")
        d = true;
      else if (l !== "checked")
        t2.setAttribute(l, "");
    }
    return [this.bind({
      selector: t2,
      attribute: l,
      value: f,
      object: e2,
      property: c,
      template: p,
      toUI: typeof u === "string" ? u === "<" : u,
      fromUI: typeof a === "string" ? a === ">" : a,
      atEvent: u === "@",
      parent: i2,
      oneTime: d
    })];
  }
  static registerWebComponent(t2, e2) {
    t2 ?? (t2 = e2.webComponent);
    class WebComponentWrapper extends HTMLElement {
      constructor() {
        super();
        this.webComponentComponent = e2;
        this.webComponentUIView = null;
        this.attachShadow({
          mode: "open"
        });
      }
      connectedCallback() {
        this.initialize();
      }
      disconnectedCallback() {
        this.terminate();
      }
      attributeChangedCallback(t3, e3, i3) {
        this.initialize();
        this.webComponentUIView.model[t3] = i3;
      }
      initialize() {
        var _a;
        if (this.webComponentUIView == null) {
          const t3 = "create" in this.webComponentComponent ? this.webComponentComponent.create() : new this.webComponentComponent();
          t3.webComponentHost = this;
          this.webComponentUIView = s.create(this.shadowRoot, t3, this.webComponentComponent.template, {
            host: (_a = this.shadowRoot) == null ? void 0 : _a.host
          });
        }
      }
      terminate() {
        if (this.webComponentUIView != null)
          this.webComponentUIView.destroy();
      }
    }
    WebComponentWrapper.observedAttributes = e2.observedAttributes ?? [];
    WebComponentWrapper.observedProperties = e2.observedProperties ?? WebComponentWrapper.observedAttributes;
    const i2 = [.../* @__PURE__ */ new Set([...WebComponentWrapper.observedAttributes, ...WebComponentWrapper.observedProperties])];
    for (const t3 of i2)
      Object.defineProperty(WebComponentWrapper.prototype, t3, {
        configurable: true,
        enumerable: false,
        get() {
          return this.webComponentUIView.model[t3];
        },
        set(e3) {
          if (WebComponentWrapper.observedAttributes.includes(t3))
            this.setAttribute(t3, e3);
          else {
            this.initialize();
            this.webComponentUIView.model[t3] = e3;
          }
        }
      });
    customElements.define(t2, WebComponentWrapper);
    return WebComponentWrapper;
  }
};
t = _UI;
_UI.initialized = false;
_UI.id = 0;
_UI.views = [];
_UI.destroyed = [];
_UI.globals = new UIView();
_UI.registrations = {};
_UI.leaveAttributes = false;
_UI.regexReplace = /([\S\s]*?)\\?\$\{([^}]*?[<=@!]=[*=>|][^}]*?)\}([\S\s]*)/m;
_UI.regexAttribute = /^\s*(\S*?)\s*([<=@!])=([*=>|])\s*(\S*?)\s*$/;
_UI.regexValue = /(?<before>[\S\s]*?)\\?\$\{\s*(?<property>[\s\S]*?)\s*\}(?<after>[\S\s]*)/m;
_UI.regexConditionalValue = /^\s*(.+?)\s*([=!])\s*(\S+)/;
_UI.regexSplitConditionalValue = /^(.+?)([=!])(.*)/;
_UI.bindingCounter = 0;
_UI.i = [];
_UI.t = [];
_UI.loaded = () => {
  var _a;
  t.loadResolve();
  (_a = document.defaultView) == null ? void 0 : _a.removeEventListener("load", t.loaded);
};
function e() {
  let t2 = window;
  let e2 = window;
  while (true)
    try {
      if (t2.parent === t2) {
        e2 = t2;
        break;
      } else if (t2.parent.UI !== "guarantee-condition-always-true")
        t2 = t2.parent;
    } catch (t3) {
      break;
    }
  return e2;
}
var i = e();
if (!("UI" in i))
  i.UI = _UI;
var s = i.UI;
export {
  s as UI,
  UIView
};
//# sourceMappingURL=@peasy-lib_peasy-ui.js.map
