import "./chunk-76J2PTFD.js";

// node_modules/@peasy-lib/peasy-engine/dist/esm/index.mjs
var Engine = class _Engine {
  constructor(t, s) {
    this.interval = t;
    this.callback = s;
    this.started = false;
    this.paused = false;
    this.destroyed = false;
    this.lastTime = 0;
    this.resetThreshold = 1e3;
    this.timeSinceLast = 0;
    this.accTime = 0;
    this.oneTime = false;
    this.isolated = false;
    this.doStart = (t2) => {
      this.started = true;
      this.startTime = t2;
      this.lastTime = t2;
      this.accTime = 0;
      requestAnimationFrame(this.tick);
    };
    this.tick = (t2) => {
      if (!this.started || this.paused)
        return;
      const s2 = t2 - this.lastTime;
      this.lastTime = t2;
      if (s2 > this.resetThreshold) {
        console.log(`Too long since last tick: ${s2}ms. Resetting.`);
        this.timeSinceLast = 0;
        requestAnimationFrame(this.tick);
        return;
      }
      this.timeSinceLast += s2;
      const i = this.call();
      if (i instanceof Promise)
        void i.then(() => requestAnimationFrame(this.tick));
      else
        requestAnimationFrame(this.tick);
    };
    this.call = () => {
      if (this.timeSinceLast >= this.interval) {
        const t2 = this.callback(this.interval, this.accTime);
        this.accTime += this.interval;
        this.timeSinceLast -= this.interval;
        if (this.oneTime)
          this.destroy();
        if (t2 instanceof Promise)
          return t2.then(() => this.call());
        else
          void this.call();
        return true;
      }
      return false;
    };
  }
  static create(t) {
    if (typeof t === "function")
      t = {
        callback: t
      };
    const s = t.ms ?? 1e3 / (t.fps ?? 60);
    const i = new _Engine(s, t.callback);
    i.resetThreshold = t.resetThreshold ?? i.resetThreshold;
    i.oneTime = t.oneTime ?? i.oneTime;
    i.isolated = t.isolated ?? i.isolated;
    if (!i.isolated)
      _Engine.engines.push(i);
    if (t.started ?? true)
      i.start();
    return i;
  }
  static start() {
    return _Engine.engines.map((t) => t.start());
  }
  static stop() {
    return _Engine.engines.map((t) => t.stop());
  }
  static pause() {
    return _Engine.engines.map((t) => t.pause());
  }
  static destroy() {
    _Engine.engines.forEach((t) => t.destroy());
  }
  start() {
    if (this.started && !this.paused)
      return false;
    requestAnimationFrame(this.paused ? this.tick : this.doStart);
    this.paused = false;
    return true;
  }
  stop() {
    if (!this.started)
      return false;
    this.started = false;
    this.paused = false;
    return true;
  }
  pause() {
    if (!this.started)
      return false;
    this.paused = true;
    return true;
  }
  destroy() {
    this.destroyed = true;
    this.stop();
    const t = _Engine.engines.indexOf(this);
    if (t >= 0)
      _Engine.engines.splice(t, 1);
  }
};
Engine.engines = [];
export {
  Engine
};
//# sourceMappingURL=@peasy-lib_peasy-engine.js.map
