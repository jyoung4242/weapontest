class State {
    constructor(t, s) {
        this.states = t;
        this.name = s;
    }
    enter(t, ...s) {}
    leave(t, ...s) {}
    update(...t) {}
}

class States {
    constructor() {
        this.states = new Map;
        this.current = null;
        this.currentParams = [];
        this.currentTime = 0;
    }
    register(...t) {
        const s = [];
        let i = [];
        const e = [ ...t ];
        e.reverse();
        for (const t of e) {
            if (typeof t === "string") {
                i.push(t);
                continue;
            }
            if (i.length === 0) i = [ t.name ];
            s.push(...i.map((s => {
                const i = new t(this, s);
                this.states.set(i.name, i);
                this.states.set(i.constructor, i);
                return i;
            })));
            i = [];
        }
        return s;
    }
    set(t, s = 0, ...i) {
        const e = typeof t === "string" || t != null && "prototype" in t ? this.states.get(t) ?? null : t;
        if ((e ?? null) == (this.current ?? null)) if (i.length === this.currentParams.length) {
            let t = true;
            for (let s = 0; s < i.length; s++) if (i[s] !== this.currentParams[s]) {
                t = false;
                break;
            }
            if (t) return;
        }
        let n;
        let h;
        if (this.current != null) n = this.current.leave(e, ...i);
        if (n instanceof Promise) return n.then((() => {
            if (e != null) h = e.enter(this.current, ...i);
            if (h instanceof Promise) return h.then((() => {
                this.current = e;
                this.currentParams = [ ...i ];
                this.currentTime = s;
            }));
            this.current = e;
            this.currentParams = [ ...i ];
            this.currentTime = s;
        }));
        if (e != null) h = e.enter(this.current, ...i);
        if (h instanceof Promise) return h.then((() => {
            this.current = e;
            this.currentParams = [ ...i ];
            this.currentTime = s;
        }));
        this.current = e;
        this.currentParams = [ ...i ];
        this.currentTime = s;
    }
    get(t) {
        if (t != null && this.currentTime > t) this.currentTime = t;
        return {
            state: this.current,
            since: this.currentTime
        };
    }
    update(...t) {
        return this.current?.update(...t);
    }
}

export { State, States };
//# sourceMappingURL=index.mjs.map
