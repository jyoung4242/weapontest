'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

class State {
    constructor(states, name) {
        this.states = states;
        this.name = name;
    }
    enter(_previous, ...params) { }
    leave(_next, ...params) { }
    update(...params) { }
}

class States {
    constructor() {
        this.states = new Map();
        this.current = null;
        this.currentParams = [];
        this.currentTime = 0;
    }
    register(...types) {
        const created = [];
        let names = [];
        const reversed = [...types];
        reversed.reverse();
        for (const type of reversed) {
            if (typeof type === 'string') {
                names.push(type);
                continue;
            }
            if (names.length === 0) {
                names = [type.name];
            }
            created.push(...names.map(name => {
                const state = new type(this, name);
                this.states.set(state.name, state);
                this.states.set(state.constructor, state);
                return state;
            }));
            names = [];
        }
        return created;
    }
    set(state, now = 0, ...params) {
        const next = typeof state === 'string' || (state != null && 'prototype' in state) ? this.states.get(state) ?? null : state;
        if ((next ?? null) == (this.current ?? null)) {
            if (params.length === this.currentParams.length) {
                let sameParams = true;
                for (let i = 0; i < params.length; i++) {
                    if (params[i] !== this.currentParams[i]) {
                        sameParams = false;
                        break;
                    }
                }
                if (sameParams) {
                    return;
                }
            }
        }
        let leaving;
        let entering;
        if (this.current != null) {
            leaving = this.current.leave(next, ...params);
        }
        if (leaving instanceof Promise) {
            return leaving.then(() => {
                if (next != null) {
                    entering = next.enter(this.current, ...params);
                }
                if (entering instanceof Promise) {
                    return entering.then(() => {
                        this.current = next;
                        this.currentParams = [...params];
                        this.currentTime = now;
                    });
                }
                this.current = next;
                this.currentParams = [...params];
                this.currentTime = now;
            });
        }
        if (next != null) {
            entering = next.enter(this.current, ...params);
        }
        if (entering instanceof Promise) {
            return entering.then(() => {
                this.current = next;
                this.currentParams = [...params];
                this.currentTime = now;
            });
        }
        this.current = next;
        this.currentParams = [...params];
        this.currentTime = now;
    }
    get(now) {
        if (now != null && this.currentTime > now) {
            this.currentTime = now;
        }
        return {
            state: this.current,
            since: this.currentTime,
        };
    }
    update(...params) {
        return this.current?.update(...params);
    }
}

exports.State = State;
exports.States = States;
//# sourceMappingURL=index.dev.cjs.map
