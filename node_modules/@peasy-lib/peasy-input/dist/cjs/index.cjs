'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

class KeyboardMapping {
  constructor(mappings, callback, effectMode, keymapMode) {
    this.mappings = mappings;
    this.callback = callback;
    this.effectMode = effectMode;
    this.keymapMode = keymapMode;
    if (typeof this.mappings === "string") {
      this.mappings = [this.mappings];
    }
    if (Array.isArray(this.mappings)) {
      this.mappings = [...this.mappings].reduce((mappings2, value) => {
        mappings2[value] = value;
        return mappings2;
      }, {});
    }
    for (const key in this.mappings) {
      const action = this.mappings[key];
      if (typeof action === "string") {
        this.mappings[key] = {
          action,
          repeat: true
        };
      }
      this.mappings[key].mapping = this;
    }
  }
  maps(keys) {
    return this.mappings[keys];
  }
  unmap() {
    Keyboard.unmap(this);
  }
}

const _Keyboard = class {
  static initialize(element) {
    this.element = element;
    this.element.addEventListener("keydown", this.keyChange);
    this.element.addEventListener("keyup", this.keyChange);
    return this;
  }
  static terminate() {
    this.element?.removeEventListener("keydown", this.keyChange);
    this.element?.removeEventListener("keyup", this.keyChange);
    this.element = null;
  }
  static map(mappings, callback, effectMode = "interval", keymapMode = "add") {
    const mapping = new KeyboardMapping(mappings, callback, effectMode, keymapMode);
    this.mappings.unshift(mapping);
    return mapping;
  }
  static unmap(mapping) {
    this.mappings = this.mappings.filter((m) => m !== mapping);
    for (const key of this.pressed.keys()) {
      if (this.pressed.get(key)?.keymap.mapping === mapping) {
        this.pressed.delete(key);
      }
    }
    this.lastPressed = [...this.pressed.keys()];
  }
  static resolve(keys, eventType) {
    const mapped = this.mapped(keys);
    if (mapped == null) {
      return;
    }
    if (mapped.mapping?.effectMode === "instant") {
      mapped.mapping.callback?.(mapped.action, eventType === "keydown", 0);
      return;
    }
    if (eventType === "keydown") {
      if (!this.pressed.has(keys)) {
        this.pressed.set(keys, { keymap: mapped, repeat: 0, done: false, doneIs: false });
      }
    } else if (eventType === "keyup") {
      this.pressed.delete(keys);
    }
  }
  static update(deltaTime) {
    this.pressed.forEach((mapped, key) => {
      if (mapped.repeat === 0 || mapped.keymap.repeat && mapped.repeat <= 0) {
        mapped.keymap.mapping?.callback?.(mapped.keymap.action, true, deltaTime);
        mapped.repeat += Input.rps;
      } else {
        if (!mapped.keymap.repeat) {
          if (!mapped.done) {
            mapped.done = true;
          }
        } else {
          mapped.repeat -= deltaTime * 1e3;
        }
      }
    });
    this.lastPressed.forEach((keys) => {
      if (!this.pressed.has(keys)) {
        const mapped = this.mapped(keys);
        mapped?.mapping.callback?.(mapped.action, false, deltaTime);
      }
    });
    this.lastPressed = [...this.pressed.keys()];
  }
  static mapped(keys) {
    let mapped;
    for (const mapping of this.mappings) {
      mapped = mapping.maps(keys);
      if (mapped != null || mapping.keymapMode === "replace") {
        break;
      }
    }
    return mapped;
  }
  static is(action) {
    for (const pressed of this.pressed.values()) {
      if (pressed.keymap.action !== action) {
        continue;
      }
      if (pressed.repeat === 0 || pressed.keymap.repeat && pressed.repeat <= 0) {
        return true;
      } else {
        if (!pressed.keymap.repeat && !pressed.doneIs) {
          pressed.doneIs = true;
          return true;
        }
      }
      return false;
    }
    return false;
  }
};
let Keyboard = _Keyboard;
Keyboard.mappings = [];
Keyboard.pressed = /* @__PURE__ */ new Map();
Keyboard.lastPressed = [];
Keyboard.keyChange = (event) => {
  let keys = event.key;
  if (["Control", "Alt", "Shift"].includes(keys)) {
    if (event.type === "keydown") {
      for (const pressed of _Keyboard.pressed.keys()) {
        const pressedKeys = pressed.split("+");
        if (pressedKeys.includes(keys)) {
          continue;
        }
        let modifiedPressed = pressedKeys.pop();
        for (const modifier of ["Shift", "Alt", "Control"]) {
          if (keys === modifier || pressedKeys.includes(modifier)) {
            modifiedPressed = `${modifier}+${modifiedPressed}`;
          }
        }
        _Keyboard.resolve(pressed, "keyup");
        _Keyboard.resolve(modifiedPressed, "keydown");
      }
    } else if (event.type === "keyup") {
      for (const pressed of _Keyboard.pressed.keys()) {
        const pressedKeys = pressed.split("+");
        if (!pressedKeys.includes(keys)) {
          continue;
        }
        const modifiedPressed = pressedKeys.filter((key) => key !== keys).join("+");
        _Keyboard.resolve(pressed, "keyup");
        _Keyboard.resolve(modifiedPressed, "keydown");
      }
    }
  } else {
    if (event.shiftKey) {
      keys = `Shift+${keys}`;
    }
    if (event.altKey) {
      keys = `Alt+${keys}`;
    }
    if (event.ctrlKey) {
      keys = `Control+${keys}`;
    }
    _Keyboard.resolve(keys, event.type);
  }
};

class MouseMapping {
  constructor() {
  }
  unmap() {
    Mouse.unmap(this);
  }
}

class Mouse {
  static initialize() {
    return this;
  }
  static terminate() {
  }
  static map() {
    const mapping = new MouseMapping();
    this.mappings.unshift(mapping);
    return mapping;
  }
  static unmap(mapping) {
    this.mappings = this.mappings.filter((m) => m !== mapping);
  }
  static update(deltaTime) {
  }
  static is(action) {
    return false;
  }
}
Mouse.mappings = [];

const _Input = class {
  static initialize(rps, rAF = true, element = document.body) {
    _Input.initialized = true;
    this.rps = rps;
    Keyboard.initialize(element);
    if (rAF === true) {
      let last;
      const start = (now) => {
        last = now;
        requestAnimationFrame(tick);
      };
      const tick = (now) => {
        const deltaTime = (now - last) / 1e3;
        last = now;
        _Input.update(deltaTime);
        requestAnimationFrame(tick);
      };
      requestAnimationFrame(start);
      return;
    }
    return this;
  }
  static terminate() {
    Keyboard.terminate();
  }
  static map(mappings, callback, effectMode = "interval", keymapMode = "add") {
    if (!_Input.initialized) {
      _Input.initialize(60);
    }
    return Keyboard.map(mappings, callback, effectMode, keymapMode);
  }
  static unmap(mapping) {
    if (mapping instanceof KeyboardMapping) {
      Keyboard.unmap(mapping);
    } else {
      Mouse.unmap(mapping);
    }
  }
  static update(deltaTime) {
    Keyboard.update(deltaTime);
  }
  static is(action) {
    if (!_Input.initialized) {
      _Input.initialize(60);
    }
    return Keyboard.is(action) || Mouse.is(action);
  }
};
let Input = _Input;
Input.initialized = false;

exports.Input = Input;
exports.Keyboard = Keyboard;
exports.KeyboardMapping = KeyboardMapping;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
