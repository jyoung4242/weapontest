import { UIAnimation } from './ui-animation';
import { IUIBinding, UIBinding } from "./ui-binding";
import { UIView } from "./ui-view";
export declare type WebComponent = {
    webComponent: string;
    template: string;
    observedAttributes?: string[];
    observedProperties?: string[];
    create?: () => InstanceType<any>;
};
declare class _UI {
    private static initialized;
    static id: number;
    static views: UIView[];
    static destroyed: UIView[];
    static globals: UIView;
    static registrations: Record<string, any>;
    static leaveAttributes: boolean;
    private static readonly regexReplace;
    private static readonly regexAttribute;
    private static readonly regexValue;
    private static readonly regexConditionalValue;
    private static readonly regexSplitConditionalValue;
    private static bindingCounter;
    private static _queue;
    private static _nextQueue;
    private static loadPromise;
    private static loadResolve;
    static initialize(rafOrInterval?: boolean | number): void;
    static import(src: string): void;
    static ready(): Promise<Record<string, any>>;
    static create(parent?: HTMLElement | string | ShadowRoot, model?: {}, template?: string | HTMLElement | null, options?: {
        parent?: any;
        prepare?: boolean;
        sibling?: any;
        host?: Element;
    }): UIView;
    static play(animation: string | UIAnimation, element?: HTMLElement): UIAnimation;
    static queue(func: any): void;
    static register(name: string, classForName: any): void;
    static register(webComponent: any): void;
    static parse(element: Element, object: any, view: UIView, parent: any): UIBinding[];
    static bind(options: IUIBinding): UIBinding;
    static unbind(binding: UIBinding): void;
    static update(): void;
    static resolveProperty(object: any, property: string): {
        target: any;
        property: string;
    };
    static resolveValue(object: any, prop: string): any;
    private static initializeLoadPromise;
    private static hoist;
    private static objectHas;
    static parentElement(element: Element, parent: UIView | UIBinding | null): HTMLElement;
    static parentNode(element: Element, parent: UIView | UIBinding | null): Node;
    private static readonly loaded;
    private static prepare;
    private static parseAttribute;
    private static registerWebComponent;
}
export declare const UI: typeof _UI;
export {};
//# sourceMappingURL=ui.d.ts.map