import { UI } from "./ui";
import { UIAnimation } from "./ui-animation";
import { UIBinding } from "./ui-binding";
export declare class UIView {
    state: 'created' | 'bound' | 'attaching' | 'attached' | 'rendered' | 'destroyed';
    parent: typeof UI | UIBinding | UIView;
    model: any;
    element: HTMLElement;
    host?: Element | null;
    bindings: UIBinding[];
    views: UIView[];
    animations: UIAnimation[];
    animationQueue: UIAnimation[];
    destroyed: '' | 'queue' | 'destroy' | 'destroyed';
    moved: '' | 'queue' | 'move';
    attached: Promise<void>;
    private attachResolve;
    private parentElement;
    private sibling;
    static create(parent: HTMLElement, model: {} | undefined, template: HTMLElement | null, options?: {
        parent?: any;
        prepare?: boolean;
        sibling?: any;
        host?: Element;
    }): UIView;
    destroy(): void;
    terminate(): void;
    move(sibling: HTMLElement): void;
    play(animation: string | UIAnimation, element: HTMLElement): UIAnimation;
    updateFromUI(): void;
    updateToUI(): void;
    updateAtEvents(): void;
    updateAnimations(now: number): void;
    updateMove(): void;
    private getAnimations;
}
//# sourceMappingURL=ui-view.d.ts.map