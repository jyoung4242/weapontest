import { UIView } from './ui-view';
import { UI } from "./ui";
export declare type IUIBinding = Partial<Omit<UIBinding, 'id'>>;
export declare type fromUICallback = (newValue: string, oldValue: any, property: string, model: any) => any | void;
export declare type toUICallback = (newValue: any, oldValue: any, property: string, model: any, value: any) => string | void;
export declare class UIBinding {
    id: number;
    parent: typeof UI | UIView;
    object: any;
    property?: string;
    arguments: string[];
    context: any;
    selector?: string | Element | Node;
    attribute: string;
    value: string | Element;
    template: HTMLElement;
    fromUI: boolean | fromUICallback;
    toUI: boolean | toUICallback;
    atEvent: boolean;
    oneTime: boolean;
    views: UIView[];
    private $element;
    private lastValue;
    private lastUIValue;
    private firstUpdate;
    private events;
    constructor();
    get element(): Element;
    set element(element: Element | null);
    static create(options: IUIBinding): UIBinding;
    destroy(): void;
    unbind(): void;
    addListener(): void;
    removeListener(): void;
    updateFromUI(): void;
    updateToUI(): void;
    updateAtEvents(): void;
    updateMove(): void;
    triggerAtEvent: (event: any) => void;
    twoWayBindingEvent: (event: any) => void;
    private updateViews;
}
//# sourceMappingURL=ui-binding.d.ts.map