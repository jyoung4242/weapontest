const _Assets = class {
  static get pending() {
    return this.requested - this.loaded;
  }
  static initialize(input = {}) {
    _Assets.initialized = true;
    if (input.src != null) {
      _Assets.sources.default = input.src;
    }
  }
  static load(assets) {
    return Promise.all(assets.map(async (asset) => {
      if (typeof asset === "string") {
        asset = { src: asset };
      }
      const src = !(asset.src ?? "").startsWith("data:") ? `${_Assets.sources.default}${asset.src ?? ""}` : asset.src ?? "";
      const type = asset.family != null ? "font" : src.startsWith("data:") ? src.slice("data:".length, src.indexOf("/")) : _Assets.types[asset.type ?? src.split(".").pop() ?? ""];
      const loader = _Assets.loaders[type];
      if (loader == null) {
        return null;
      }
      let name = asset.name;
      if (name == null) {
        if (type === "font") {
          name = asset.family;
        } else {
          name = src.split("/").pop() ?? "";
          const parts = name.split(".");
          parts.pop();
          name = parts.join(".");
        }
      }
      _Assets.requested++;
      let promise;
      if (src instanceof Image) {
        promise = Promise.resolve(src);
      } else {
        promise = loader(src, asset);
      }
      _Assets.assets[type][name] = await promise;
      _Assets.loaded++;
      return promise;
    }));
  }
  static clear() {
    _Assets.assets = {
      image: {},
      audio: {},
      font: {}
    };
    _Assets.requested = 0;
    _Assets.loaded = 0;
    return Promise.resolve();
  }
  static image(name) {
    return _Assets.assets.image[name];
  }
  static audio(name) {
    return _Assets.assets.audio[name];
  }
  static font(name) {
    return _Assets.assets.font[name];
  }
  static loadImage(src) {
    return new Promise(async (resolve) => {
      const img = new Image();
      img.onprogress = (...args) => console.log("progress", args);
      img.onload = () => resolve(img);
      if (src.startsWith("data:")) {
        img.src = src;
      } else {
        img.src = await fetch(src).then((res) => res.url);
      }
    });
  }
  static loadAudio(url) {
    return new Promise((resolve) => {
      const audio = new Audio();
      audio.addEventListener("progress", (...args) => console.log("progress", args));
      audio.oncanplaythrough = () => resolve(audio);
      audio.src = url;
    });
  }
  static loadFont(url, asset) {
    if (!url.startsWith("url(")) {
      url = `url(${url})`;
    }
    return new Promise(async (resolve) => {
      const font = new FontFace(asset.family, url, asset.descriptors ?? {});
      await font.load();
      document.fonts.add(font);
      resolve(font);
    });
  }
};
let Assets = _Assets;
Assets.initialized = false;
Assets.sources = { default: "/assets/" };
Assets.assets = {
  image: {},
  audio: {},
  font: {}
};
Assets.requested = 0;
Assets.loaded = 0;
Assets.types = {
  image: "image",
  audio: "audio",
  png: "image",
  svg: "image",
  jpg: "image",
  jpeg: "image",
  gif: "image",
  mp3: "audio",
  wav: "audio"
};
Assets.loaders = {
  image: _Assets.loadImage,
  audio: _Assets.loadAudio,
  font: _Assets.loadFont
};

export { Assets };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
