export interface IAssets {
    src?: string;
}
export interface IAsset {
    src?: string;
    name?: string;
    family?: string;
    descriptors?: any;
    type?: 'image' | 'audio' | 'font';
}
export declare class Assets {
    private static initialized;
    static sources: Record<string, string>;
    static assets: {
        image: Record<string, HTMLImageElement>;
        audio: Record<string, HTMLMediaElement>;
        font: Record<string, FontFace>;
    };
    static requested: number;
    static loaded: number;
    static types: Record<string, string>;
    static loaders: Record<string, any>;
    static get pending(): number;
    static initialize(input?: IAssets): void;
    static load(assets: (string | IAsset)[]): Promise<any[]>;
    static clear(): Promise<void>;
    static image(name: string): HTMLImageElement;
    static audio(name: string): HTMLMediaElement;
    static font(name: string): FontFace;
    static loadImage(src: string): Promise<HTMLImageElement>;
    static loadAudio(url: string): Promise<HTMLMediaElement>;
    static loadFont(url: string, asset: IAsset): Promise<FontFace>;
}
//# sourceMappingURL=assets.d.ts.map